{"version":3,"sources":["components/Card/index.js","components/Body/index.js","components/Nav/index.js","components/Header/index.js","components/Footer/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","props","icon","handleClick","dataid","react_default","a","createElement","className","data-id","src","alt","onClick","Body","itemList","handleItemSelected","map","obj","i","components_Card","key","Nav","score","topScore","href","Header","Footer","title","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffleArray","array","length","j","Math","floor","random","event","target","getAttribute","state","selected","includes","setState","max","data","concat","components_Nav","components_Header","components_Body","components_Footer","Component","App","pages_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3e77e67.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card({ props, icon, handleClick, dataid }) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\" >\n        <img className=\"click-item\" data-id={dataid} src={icon} alt=\"icon\" onClick={handleClick}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nfunction Body( { itemList, handleItemSelected } ) {\n  return (\n    <div className=\"container\">\n      {itemList.map( (obj, i) => {\n        return <Card key={i} dataid={obj.key} icon={obj.icon} handleClick={handleItemSelected}></Card>\n      })}\n    </div>\n  )\n}\n\nexport default Body;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav({score, topScore}) {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"brand\"><a href=\"/\">Home</a></li>\n        <li>Click an image to begin</li>\n        <li>Score {score} | Top Score {topScore}</li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <br />\n      <h1>Clicky Valentine Game</h1>\n      <h2>Grab All Your Valentine Gifts</h2>\n      <h2>Only One Each!</h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"bottom\">\n        Clicky Valentine Game! <img alt=\"react\" src=\"assets/images/react.svg\" />\n      </div>\n      <div className=\"credit\">\n        Icons made by <a href=\"http://www.freepik.com/\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" \t\t    title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" \t\t    title=\"Creative Commons BY 3.0\" >CC 3.0 BY</a>\n      </div>\n      <div className=\"credit\"><a href=\"http://www.github.com/hyxhuynh/ClickyGame\" title=\"GitHub\">Github: Hy Huynh 2019</a></div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Body from \"../components/Body\";\nimport Nav from \"../components/Nav\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport data from \"../data.json\";\n\nclass Home extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      score: 0,\n      topScore: 0,\n      selected: [],\n      data: this.shuffleArray(data)\n    };\n  }\n\n  shuffleArray = (array) => {\n    //Copied from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  handleItemSelected = (event) => {\n    // Check the values of the event\n    var key = event.target.getAttribute('data-id');\n\n    // Check if key already exists\n    if( this.state.selected.includes(key) ){\n      // We reset the score and save the top score, then reload\n      this.setState({\n        score: 0,\n        topScore: Math.max(this.state.topScore, this.state.score), \n        data: this.shuffleArray(data),\n        selected: []\n      });\n    }\n    else {\n      this.setState({\n        score: this.state.score + 1,\n        data: this.shuffleArray(data),\n        selected: this.state.selected.concat(key)\n      });\n    }\n\n    // Randomize the list again\n    \n  };\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore}/>\n        <Header />\n        <Body\n            itemList={this.state.data} handleItemSelected={this.handleItemSelected} >\n        </Body>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport Home from \"./pages/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Home />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}